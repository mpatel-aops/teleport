// Code generated by goderive DO NOT EDIT.

package types

// deriveTeleportEqualOktaAssignmentV1 returns whether this and that are equal.
func deriveTeleportEqualOktaAssignmentV1(this, that *OktaAssignmentV1) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			deriveTeleportEqualResourceHeader(&this.ResourceHeader, &that.ResourceHeader) &&
			deriveTeleportEqual(&this.Spec, &that.Spec)
}

// deriveTeleportEqualResourceHeader returns whether this and that are equal.
func deriveTeleportEqualResourceHeader(this, that *ResourceHeader) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Kind == that.Kind &&
			this.SubKind == that.SubKind &&
			this.Version == that.Version &&
			deriveTeleportEqualMetadata(&this.Metadata, &that.Metadata)
}

// deriveTeleportEqualMetadata returns whether this and that are equal.
func deriveTeleportEqualMetadata(this, that *Metadata) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Name == that.Name &&
			this.Namespace == that.Namespace &&
			this.Description == that.Description &&
			deriveTeleportEqual_(this.Labels, that.Labels) &&
			((this.Expires == nil && that.Expires == nil) || (this.Expires != nil && that.Expires != nil && (*(this.Expires)).Equal(*(that.Expires))))
}

// deriveTeleportEqual returns whether this and that are equal.
func deriveTeleportEqual(this, that *OktaAssignmentSpecV1) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.User == that.User &&
			deriveTeleportEqual_1(this.Targets, that.Targets) &&
			this.CleanupTime.Equal(that.CleanupTime) &&
			this.Status == that.Status &&
			this.LastTransition.Equal(that.LastTransition) &&
			this.Finalized == that.Finalized
}

// deriveTeleportEqual_ returns whether this and that are equal.
func deriveTeleportEqual_(this, that map[string]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}

// deriveTeleportEqual_1 returns whether this and that are equal.
func deriveTeleportEqual_1(this, that []*OktaAssignmentTargetV1) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for i := 0; i < len(this); i++ {
		if !(deriveTeleportEqual_2(this[i], that[i])) {
			return false
		}
	}
	return true
}

// deriveTeleportEqual_2 returns whether this and that are equal.
func deriveTeleportEqual_2(this, that *OktaAssignmentTargetV1) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Type == that.Type &&
			this.Id == that.Id
}
